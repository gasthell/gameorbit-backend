# Generated by Django 5.2 on 2025-04-28 19:11

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('max_users', models.IntegerField()),
                ('picture', models.ImageField(blank=True, null=True, upload_to='games/')),
                ('map', models.ImageField(blank=True, null=True, upload_to='games/')),
                ('chips', models.JSONField(blank=True, default=dict)),
                ('cube', models.IntegerField(default=0)),
                ('decks', models.JSONField(blank=True, default=dict, help_text='Example: {"deck1": ["card1", "card2"]}')),
                ('objects_json', models.JSONField(blank=True, default=dict, help_text='Example: {"photo": "url", "copies": 1}')),
                ('rules', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MainPageGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, help_text='Order of the game on the main page')),
                ('name', models.CharField(max_length=255)),
                ('author', models.CharField(max_length=255)),
                ('author_link', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='main_page_games/')),
            ],
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('price', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Promocode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('option1', 'Subscription'), ('option2', 'Discount')], max_length=255)),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('max_users', models.IntegerField()),
                ('end_date', models.DateTimeField()),
                ('subscription', models.ForeignKey(blank=True, help_text='Select a subscription tariff', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.tariff')),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('tariff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='core.tariff')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=255)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='users/')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\\\+?1?\\\\d{9,15}$')])),
                ('end_date', models.DateTimeField(blank=True, help_text='Subscription end date', null=True)),
                ('free_trial', models.BooleanField(default=False)),
                ('linked_game_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, size=None)),
                ('sessions', models.JSONField(blank=True, default=list)),
                ('active', models.BooleanField(default=True)),
                ('role', models.CharField(default='user', max_length=50)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('subscription', models.ForeignKey(blank=True, help_text='Select a subscription tariff', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.tariff')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
